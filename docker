## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq
docker image ls 
docker image history hello-world
docker image inspect hello-world

#download nginx
docker pull nginx
 
#run nginx
docker run -p 80:80 nginx &

docker image inspect nginx | jq .[].Config.ExposedPorts  # you can see the port is 80

docker stop <container-id>  
#or you can kill it

docker kill <container-id>


#list out all the docker serviers ,include running and stopped
docker ps -a 

#even the containers have been stopped the containers still exist in local system, to remove it use docker rm
docker rm <container-id>

#for the image, if you want to list all images 
docker ps image ls

#remove image , all the containers need to remove first
docker rmi <image-id>


#docker build
cd /folders
vi Dockerfile
 FROM ubuntu:latest
 CMD echo Hello World!

docker build . 
 Sending build context to Docker daemon  129.4MB
 Step 1/2 : FROM ubuntu:latest
 latest: Pulling from library/ubuntu
 5b7339215d1d: Pull complete 
 14ca88e9f672: Pull complete 
 a31c3b1caad4: Pull complete 
 b054a26005b7: Pull complete 
 Digest: sha256:9b1702dcfe32c873a770a32cfd306dd7fc1c4fd134adfb783db68defc8894b3c
 Status: Downloaded newer image for ubuntu:latest
  ---> 4c108a37151f
 Step 2/2 : CMD echo Hello World!
  ---> Running in 84d79db12573
 Removing intermediate container 84d79db12573
  ---> a82481293c7a
 Successfully built a82481293c7a

##test the new image
$ docker run a82481293c7a
Hello World!

#add tag to the image so that have a nice name to trigger

$ docker tag a82481293c7a mydocker:hello-world

$ docker run mydocker:hello-world
Hello World!

docker volume create --name=nginx-volume

docker volume inspect nginx-volume

docker volume ls
 DRIVER              VOLUME NAME
 local               nginx-volume
 
docker volume rm nginx-volume

#add tag
docker   tag ea9c4d4b57b0 voume:test


##bash mode with mount a volume. normally should write the volume into the docker file
docker run -it --name volume-test --mount source=volume-test,target=/data-volume ubuntu bash

docker run -it --name unbuntu_volume -v docker_volume:/home/gene/docker/docker_volume ubuntu bash

docker run -d --name nginx-test  nginx
#Open a terminal within the container:
docker exec -t nginx-test bash
#e.g  
ocker exec -it 8e1460701bbc bash   #i: interactive, t: tty

[docker_volume]$ docker volume inspect docker_volume
[
    {
        "CreatedAt": "2019-06-23T14:02:34+08:00",
        "Driver": "local",
        "Labels": null,
        "Mountpoint": "/var/lib/docker/volumes/docker_volume/_data",
        "Name": "docker_volume",
        "Options": null,
        "Scope": "local"
    }
]



###Docker network
[gene@gene-pc docker_volume]$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
2e09d6fdacbd        bridge              bridge              local
99ef280c47cf        host                host                local
df6a51a07088        none                null                local

docker network inspect bridge

docker network create database

docker run -d --network database --name mysql -p 3306:3306 -eMYSQL_ROOT_PASSWORD=dontusethisinprod mysql   ##use this new network: database

docker network connect database adminer => if you run the docker with default network, you can connect another one after start the container

